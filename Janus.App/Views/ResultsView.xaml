<UserControl x:Class="Janus.App.ResultsView"
    xmlns:local="clr-namespace:Janus.App"
    xmlns:helpers="clr-namespace:Janus.App.Helpers"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors" 
    mc:Ignorable="d"
    d:DesignHeight="400" d:DesignWidth="900" Loaded="UserControl_Loaded">
  <UserControl.Resources>
    <BooleanToVisibilityConverter x:Key="BoolToVis" />
    <local:StringNotEmptyToVisibleConverter x:Key="StringNotEmptyToVisible" />
    <local:FirstLineConverter x:Key="FirstLineConverter" />
    <local:LogLevelSelectedConverter x:Key="LogLevelSelectedConverter" />
    <local:BooleanToGridLengthConverter x:Key="BoolToGridLength" ExpandedWidth="220" CollapsedWidth="0" />
    <local:InverseBooleanConverter x:Key="InverseBooleanConverter" />
    <helpers:ScanIdCheckedMultiConverter x:Key="ScanIdCheckedMultiConverter" />
    <GroupStyle x:Key="MyEventGroupStyle">
      <GroupStyle.HeaderTemplate>
        <DataTemplate>
          <TextBlock FontWeight="Bold" FontSize="14" Foreground="DarkSlateGray" Text="{Binding Name}" Margin="4,0,0,0"/>
        </DataTemplate>
      </GroupStyle.HeaderTemplate>
    </GroupStyle>
  </UserControl.Resources>
  <Grid Margin="20">
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="32"/>
      <ColumnDefinition Width="{Binding IsExpanded, ElementName=MetadataExpander, Converter={StaticResource BoolToGridLength}}"/>
      <ColumnDefinition Width="*"/>
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
      <RowDefinition Height="Auto"/>
      <!-- New row for Save Snapshot button -->
    </Grid.RowDefinitions>
    <!-- Expander Header Only -->
    <Expander x:Name="MetadataExpander" Grid.Column="0" Grid.Row="0" Grid.RowSpan="4" IsExpanded="False" VerticalAlignment="Top" Margin="0,0,0,0" ExpandDirection="Right">
      <Expander.Header>
        <TextBlock Text="Metadata" FontWeight="Bold">
          <TextBlock.LayoutTransform>
            <RotateTransform Angle="90" />
          </TextBlock.LayoutTransform>
        </TextBlock>
      </Expander.Header>
    </Expander>
    <!-- Metadata Panel Content -->
    <StackPanel Grid.Column="1" Grid.Row="0" Grid.RowSpan="4" Margin="0,0,20,0">
      <TextBlock Text="Machine:" FontWeight="Bold" Margin="0,8,0,0"/>
      <TextBlock Text="{Binding Metadata.MachineName}" Margin="0,0,0,8"/>
      <TextBlock Text="Notes:" FontWeight="Bold"/>
      <TextBlock Text="{Binding Metadata.UserNotes}" Margin="0,0,0,8"/>
      <TextBlock Text="Scan Timestamp:" FontWeight="Bold"/>
      <TextBlock Text="{Binding MetadataTimestampLocal}" Margin="0,0,0,8"/>
      <TextBlock Text="Window:" FontWeight="Bold"/>
      <TextBlock Text="{Binding Metadata.Window}" Margin="0,0,0,8"/>
      <TextBlock Text="Snapshot Created:" FontWeight="Bold"/>
      <TextBlock Text="{Binding MetadataSnapshotCreatedLocal}" Margin="0,0,0,8"/>
      <TextBlock Text="Minutes Before:" FontWeight="Bold"/>
      <TextBlock Text="{Binding Metadata.MinutesBefore}" Margin="0,0,0,8"/>
      <TextBlock Text="Minutes After:" FontWeight="Bold"/>
      <TextBlock Text="{Binding Metadata.MinutesAfter}" Margin="0,0,0,8"/>
    </StackPanel>
    <!-- Filters and Status -->
    <Grid Grid.Column="2" Grid.Row="0" Margin="0,0,0,10">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="200"/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="180"/>
        <ColumnDefinition Width="180"/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="120"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <!-- Results label and event count -->
      <TextBlock Grid.Column="0" Grid.Row="0" Text="Results:" FontWeight="Bold" FontSize="16" VerticalAlignment="Center" Margin="0,0,10,0"/>
      <TextBlock Grid.Column="0" Grid.Row="1"
                 FontWeight="Bold"
                 VerticalAlignment="Center"
                 Margin="0,0,10,0"
                 Text="{Binding EventCountStatus}"/>
      <!-- Log Level -->
      <TextBlock Grid.Column="1" Grid.Row="0" Text="Log Level:" VerticalAlignment="Center" Margin="0,0,10,0"/>
      <ComboBox Grid.Column="2" Grid.Row="0" Width="180" Height="28" IsEditable="False" HorizontalAlignment="Left" VerticalAlignment="Center"
            ItemsSource="{Binding LogLevels}"
            IsDropDownOpen="{Binding IsLogLevelPopupOpen, Mode=TwoWay}"
            StaysOpenOnEdit="True"
            Padding="0">
        <ComboBox.Template>
          <ControlTemplate TargetType="ComboBox">
            <Grid>
              <ToggleButton IsChecked="{Binding IsLogLevelPopupOpen, Mode=TwoWay}" Focusable="False" Background="White" BorderBrush="#888" BorderThickness="1" Height="28" VerticalAlignment="Center">
                <ContentPresenter Content="{Binding SelectedLogLevelsDisplay}" VerticalAlignment="Center" Margin="6,0,0,0"/>
              </ToggleButton>
              <Popup Placement="Bottom" IsOpen="{Binding IsLogLevelPopupOpen, Mode=TwoWay}" StaysOpen="False">
                <Border Background="White" BorderBrush="#888" BorderThickness="1" Padding="4">
                  <ItemsControl ItemsSource="{Binding LogLevels}">
                    <ItemsControl.ItemTemplate>
                      <DataTemplate>
                        <CheckBox Content="{Binding}"
                              IsChecked="{Binding DataContext.SelectedLogLevels, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource LogLevelSelectedConverter}, ConverterParameter={x:Null}}"
                              Command="{Binding DataContext.ToggleLogLevelCommand, RelativeSource={RelativeSource AncestorType=UserControl}}"
                              CommandParameter="{Binding}"/>
                      </DataTemplate>
                    </ItemsControl.ItemTemplate>
                  </ItemsControl>
                </Border>
              </Popup>
            </Grid>
          </ControlTemplate>
        </ComboBox.Template>
      </ComboBox>
      <!-- Search -->
      <TextBlock Grid.Column="1" Grid.Row="1" Text="Search:" VerticalAlignment="Center" Margin="0,0,10,0"/>
      <TextBox Grid.Column="2" Grid.Row="1" Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" Width="180" VerticalAlignment="Center"/>
      <!-- Group by Log -->
      <CheckBox Grid.Column="3" Grid.Row="1" Content="Group by Log" IsChecked="{Binding IsGroupingEnabled}" Margin="0,0,0,0" VerticalAlignment="Center"
                IsEnabled="{Binding IsGroupByLevelEnabled, Converter={StaticResource InverseBooleanConverter}}"/>
      <!-- Group by Level -->
      <CheckBox Grid.Column="3" Grid.Row="0" Content="Group by Level" IsChecked="{Binding IsGroupByLevelEnabled}" Margin="0,4,0,0" VerticalAlignment="Center"
                IsEnabled="{Binding IsGroupingEnabled, Converter={StaticResource InverseBooleanConverter}}"/>
    </Grid>
    <!-- Progress/Status -->
    <TextBlock Grid.Column="2" Grid.Row="1" Text="{Binding ScanStatus}" FontWeight="Bold" Foreground="DarkBlue" Margin="0,0,0,10"/>
    <!-- DataGrid and Details Split Panels -->
    <Grid Grid.Column="2" Grid.Row="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="6"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <DataGrid Grid.Row="0"
                ItemsSource="{Binding EventsView}"
                SelectedItem="{Binding SelectedEvent, Mode=TwoWay}"
                AutoGenerateColumns="False"
                Margin="0,0,0,0"
                RowHeight="28"
                MinHeight="120"
                EnableRowVirtualization="True"
                EnableColumnVirtualization="True"
                VirtualizingPanel.IsVirtualizing="True"
                VirtualizingPanel.VirtualizationMode="Recycling"
                Visibility="{Binding HasEvents, Converter={StaticResource BoolToVis}}"
>
        <i:Interaction.Behaviors>
          <!-- The behavior is now simpler and correctly bound. -->
          <local:DataGridGroupStyleBehavior 
                GroupStyle="{StaticResource MyEventGroupStyle}"
                IsEnabled="{Binding IsAnyGroupingEnabled}" />
        </i:Interaction.Behaviors>
        <DataGrid.RowStyle>
          <Style TargetType="DataGridRow">
            <Setter Property="Background" Value="White"/>
            <Style.Triggers>
              <DataTrigger Binding="{Binding Level}" Value="Critical">
                <Setter Property="Background" Value="#FFF8D7DA"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding Level}" Value="Error">
                <Setter Property="Background" Value="#FFFDE2E2"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding Level}" Value="Warning">
                <Setter Property="Background" Value="#FFFFF8E1"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding Level}" Value="Information">
                <Setter Property="Background" Value="#FFE8F6FF"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding Level}" Value="Verbose">
                <Setter Property="Background" Value="#FFF3F3F3"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </DataGrid.RowStyle>
        <DataGrid.Columns>
          <DataGridTemplateColumn Header="✔" Width="32">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <CheckBox
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Command="{Binding DataContext.ToggleCheckedCommand, RelativeSource={RelativeSource AncestorType=UserControl}}"
                  CommandParameter="{Binding}">
                  <CheckBox.IsChecked>
                    <MultiBinding Converter="{StaticResource ScanIdCheckedMultiConverter}" Mode="OneWay">
                      <Binding Path="DataContext.CheckedScanEventIds" RelativeSource="{RelativeSource AncestorType=UserControl}" Mode="OneWay" />
                      <Binding Path="ScanEventId" Mode="OneWay" />
                    </MultiBinding>
                  </CheckBox.IsChecked>
                </CheckBox>
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
          <DataGridTextColumn Header="#" Binding="{Binding ScanEventId}" Width="Auto" IsReadOnly="True"/>
          <DataGridTextColumn Header="Time" Binding="{Binding TimeCreatedIso}" Width="Auto" IsReadOnly="True"/>
          <DataGridTextColumn Header="Log" Binding="{Binding LogName}" Width="Auto" IsReadOnly="True"/>
          <DataGridTextColumn Header="Level" Binding="{Binding Level}" Width="Auto" IsReadOnly="True"/>
          <DataGridTextColumn Header="Source" Binding="{Binding Source}" Width="Auto" IsReadOnly="True"/>
          <DataGridTextColumn Header="EventId" Binding="{Binding EventId}" Width="Auto" IsReadOnly="True"/>
          <DataGridTextColumn Header="Message" Width="*" IsReadOnly="True">
            <DataGridTextColumn.Binding>
              <Binding Path="Message" Mode="OneWay">
                <Binding.Converter>
                  <local:FirstLineConverter />
                </Binding.Converter>
              </Binding>
            </DataGridTextColumn.Binding>
          </DataGridTextColumn>
        </DataGrid.Columns>
      </DataGrid>
      <!-- Add this TextBlock as a placeholder -->
      <TextBlock Grid.Row="0"
             Text="No events match the current filter."
             FontSize="16"
             Foreground="Gray"
             HorizontalAlignment="Center"
             VerticalAlignment="Center">
        <TextBlock.Style>
          <Style TargetType="TextBlock">
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
              <!-- This trigger makes the TextBlock visible only when HasEvents is false -->
              <DataTrigger Binding="{Binding HasEvents}" Value="False">
                <Setter Property="Visibility" Value="Visible" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </TextBlock.Style>
      </TextBlock>
      <GridSplitter Grid.Row="1" Height="6" HorizontalAlignment="Stretch" VerticalAlignment="Center" Background="#DDD" ShowsPreview="True" AutomationProperties.Name="hSplitter" />
      <Grid Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="1*" MinWidth="120" />
          <ColumnDefinition Width="6" />
          <ColumnDefinition Width="2*" MinWidth="200" />
        </Grid.ColumnDefinitions>
        <StackPanel Grid.Column="0" VerticalAlignment="Stretch" Margin="0,0,0,0">
          <TextBlock FontWeight="SemiBold">
            <Run Text="Time: "/>
            <Run Text="{Binding SelectedEvent.TimeCreated, Mode=OneWay}"/>
          </TextBlock>
          <TextBlock>
            <Run Text="Log: "/>
            <Run Text="{Binding SelectedEvent.LogName, Mode=OneWay}"/>
          </TextBlock>
          <TextBlock>
            <Run Text="Level: "/>
            <Run Text="{Binding SelectedEvent.Level, Mode=OneWay}"/>
          </TextBlock>
          <TextBlock>
            <Run Text="Source: "/>
            <Run Text="{Binding SelectedEvent.Source, Mode=OneWay}"/>
          </TextBlock>
          <TextBlock>
            <Run Text="EventId: "/>
            <Run Text="{Binding SelectedEvent.EventId, Mode=OneWay}"/>
          </TextBlock>
          <TextBlock>
            <Run Text="Machine: "/>
            <Run Text="{Binding SelectedEvent.MachineName, Mode=OneWay}"/>
          </TextBlock>
        </StackPanel>
        <GridSplitter Grid.Column="1" Width="6" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#DDD" ShowsPreview="True" AutomationProperties.Name="vSplitter" />
        <TextBox Grid.Column="2"
         Text="{Binding SelectedEvent.Message, Mode=OneWay}"
         IsReadOnly="True"
         AcceptsReturn="True"
         TextWrapping="Wrap"
         FontFamily="Consolas"
         FontSize="12"
         VerticalScrollBarVisibility="Auto"
         HorizontalAlignment="Stretch"
         VerticalAlignment="Stretch"
         Margin="0,0,0,0"
         MinHeight="0"
         MinWidth="0"
         MaxWidth="Infinity" />
      </Grid>
    </Grid>
    <!-- Save Snapshot button at bottom right -->
    <Button Grid.Column="2" Grid.Row="4" Content="Save Snapshot" Command="{Binding SaveSnapshotCommand}" Width="120" Margin="0,10,0,0" VerticalAlignment="Bottom" HorizontalAlignment="Right" IsEnabled="{Binding CanSaveSnapshot}"/>
    <!-- Back button at bottom left -->
    <Button Grid.Column="2" Grid.Row="4" Content="Back" Command="{Binding BackCommand}" Width="80" Margin="0,10,0,0" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
  </Grid>
</UserControl>
